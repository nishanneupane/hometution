// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id          String   @id @default(cuid())
  name        String
  phone       String
  email       String?
  schoolName  String
  grade       String
  subject     String[]
  province    String
  district    String
  municipality String
  timeSlot    String
  additionalInfo String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("students")
}

model Teacher {
  id           String   @id @default(cuid())
  name         String
  phone        String
  email        String?
  gender       String
  qualification String
  experience   String
  subjects     String[]
  province     String
  district     String
  municipality String
  teacherCode  String   @unique
  isApproved   Boolean  @default(false)
  cv           String?
  additionalInfo String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applications Application[]

  @@map("teachers")
}

model TuitionRequest {
  id           String   @id @default(cuid())
  studentName  String
  phone        String
  email        String?
  subject      String
  grade        String
  location     String
  timeSlot     String
  budget       String?
  requirements String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applications Application[]

  @@map("tuition_requests")
}

model Application {
  id              String         @id @default(cuid())
  teacherId       String
  tuitionRequestId String
  status          String         @default("pending") // pending, approved, rejected
  message         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  teacher         Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  tuitionRequest  TuitionRequest @relation(fields: [tuitionRequestId], references: [id], onDelete: Cascade)

  @@unique([teacherId, tuitionRequestId])
  @@map("applications")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String   // "student" or "parent"
  message   String
  rating    Int      @default(5)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // "student_registration", "teacher_application", "tuition_request"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}
